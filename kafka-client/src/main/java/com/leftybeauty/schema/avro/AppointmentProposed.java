/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leftybeauty.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AppointmentProposed extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6174502046285869803L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AppointmentProposed\",\"namespace\":\"com.leftybeauty.schema.avro\",\"fields\":[{\"name\":\"leftyUserProviderId\",\"type\":\"string\"},{\"name\":\"clientAddressId\",\"type\":\"string\"},{\"name\":\"appointmentDateTime\",\"type\":\"long\"},{\"name\":\"proposedTimestamp\",\"type\":\"long\"},{\"name\":\"leftyProviderServiceIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AppointmentProposed> ENCODER =
      new BinaryMessageEncoder<AppointmentProposed>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AppointmentProposed> DECODER =
      new BinaryMessageDecoder<AppointmentProposed>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AppointmentProposed> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AppointmentProposed> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AppointmentProposed> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AppointmentProposed>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AppointmentProposed to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AppointmentProposed from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AppointmentProposed instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AppointmentProposed fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence leftyUserProviderId;
   private java.lang.CharSequence clientAddressId;
   private long appointmentDateTime;
   private long proposedTimestamp;
   private java.util.List<java.lang.CharSequence> leftyProviderServiceIds;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AppointmentProposed() {}

  /**
   * All-args constructor.
   * @param leftyUserProviderId The new value for leftyUserProviderId
   * @param clientAddressId The new value for clientAddressId
   * @param appointmentDateTime The new value for appointmentDateTime
   * @param proposedTimestamp The new value for proposedTimestamp
   * @param leftyProviderServiceIds The new value for leftyProviderServiceIds
   */
  public AppointmentProposed(java.lang.CharSequence leftyUserProviderId, java.lang.CharSequence clientAddressId, java.lang.Long appointmentDateTime, java.lang.Long proposedTimestamp, java.util.List<java.lang.CharSequence> leftyProviderServiceIds) {
    this.leftyUserProviderId = leftyUserProviderId;
    this.clientAddressId = clientAddressId;
    this.appointmentDateTime = appointmentDateTime;
    this.proposedTimestamp = proposedTimestamp;
    this.leftyProviderServiceIds = leftyProviderServiceIds;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return leftyUserProviderId;
    case 1: return clientAddressId;
    case 2: return appointmentDateTime;
    case 3: return proposedTimestamp;
    case 4: return leftyProviderServiceIds;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: leftyUserProviderId = (java.lang.CharSequence)value$; break;
    case 1: clientAddressId = (java.lang.CharSequence)value$; break;
    case 2: appointmentDateTime = (java.lang.Long)value$; break;
    case 3: proposedTimestamp = (java.lang.Long)value$; break;
    case 4: leftyProviderServiceIds = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'leftyUserProviderId' field.
   * @return The value of the 'leftyUserProviderId' field.
   */
  public java.lang.CharSequence getLeftyUserProviderId() {
    return leftyUserProviderId;
  }


  /**
   * Sets the value of the 'leftyUserProviderId' field.
   * @param value the value to set.
   */
  public void setLeftyUserProviderId(java.lang.CharSequence value) {
    this.leftyUserProviderId = value;
  }

  /**
   * Gets the value of the 'clientAddressId' field.
   * @return The value of the 'clientAddressId' field.
   */
  public java.lang.CharSequence getClientAddressId() {
    return clientAddressId;
  }


  /**
   * Sets the value of the 'clientAddressId' field.
   * @param value the value to set.
   */
  public void setClientAddressId(java.lang.CharSequence value) {
    this.clientAddressId = value;
  }

  /**
   * Gets the value of the 'appointmentDateTime' field.
   * @return The value of the 'appointmentDateTime' field.
   */
  public long getAppointmentDateTime() {
    return appointmentDateTime;
  }


  /**
   * Sets the value of the 'appointmentDateTime' field.
   * @param value the value to set.
   */
  public void setAppointmentDateTime(long value) {
    this.appointmentDateTime = value;
  }

  /**
   * Gets the value of the 'proposedTimestamp' field.
   * @return The value of the 'proposedTimestamp' field.
   */
  public long getProposedTimestamp() {
    return proposedTimestamp;
  }


  /**
   * Sets the value of the 'proposedTimestamp' field.
   * @param value the value to set.
   */
  public void setProposedTimestamp(long value) {
    this.proposedTimestamp = value;
  }

  /**
   * Gets the value of the 'leftyProviderServiceIds' field.
   * @return The value of the 'leftyProviderServiceIds' field.
   */
  public java.util.List<java.lang.CharSequence> getLeftyProviderServiceIds() {
    return leftyProviderServiceIds;
  }


  /**
   * Sets the value of the 'leftyProviderServiceIds' field.
   * @param value the value to set.
   */
  public void setLeftyProviderServiceIds(java.util.List<java.lang.CharSequence> value) {
    this.leftyProviderServiceIds = value;
  }

  /**
   * Creates a new AppointmentProposed RecordBuilder.
   * @return A new AppointmentProposed RecordBuilder
   */
  public static com.leftybeauty.schema.avro.AppointmentProposed.Builder newBuilder() {
    return new com.leftybeauty.schema.avro.AppointmentProposed.Builder();
  }

  /**
   * Creates a new AppointmentProposed RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AppointmentProposed RecordBuilder
   */
  public static com.leftybeauty.schema.avro.AppointmentProposed.Builder newBuilder(com.leftybeauty.schema.avro.AppointmentProposed.Builder other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.AppointmentProposed.Builder();
    } else {
      return new com.leftybeauty.schema.avro.AppointmentProposed.Builder(other);
    }
  }

  /**
   * Creates a new AppointmentProposed RecordBuilder by copying an existing AppointmentProposed instance.
   * @param other The existing instance to copy.
   * @return A new AppointmentProposed RecordBuilder
   */
  public static com.leftybeauty.schema.avro.AppointmentProposed.Builder newBuilder(com.leftybeauty.schema.avro.AppointmentProposed other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.AppointmentProposed.Builder();
    } else {
      return new com.leftybeauty.schema.avro.AppointmentProposed.Builder(other);
    }
  }

  /**
   * RecordBuilder for AppointmentProposed instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AppointmentProposed>
    implements org.apache.avro.data.RecordBuilder<AppointmentProposed> {

    private java.lang.CharSequence leftyUserProviderId;
    private java.lang.CharSequence clientAddressId;
    private long appointmentDateTime;
    private long proposedTimestamp;
    private java.util.List<java.lang.CharSequence> leftyProviderServiceIds;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leftybeauty.schema.avro.AppointmentProposed.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.leftyUserProviderId)) {
        this.leftyUserProviderId = data().deepCopy(fields()[0].schema(), other.leftyUserProviderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.clientAddressId)) {
        this.clientAddressId = data().deepCopy(fields()[1].schema(), other.clientAddressId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.appointmentDateTime)) {
        this.appointmentDateTime = data().deepCopy(fields()[2].schema(), other.appointmentDateTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.proposedTimestamp)) {
        this.proposedTimestamp = data().deepCopy(fields()[3].schema(), other.proposedTimestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.leftyProviderServiceIds)) {
        this.leftyProviderServiceIds = data().deepCopy(fields()[4].schema(), other.leftyProviderServiceIds);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AppointmentProposed instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leftybeauty.schema.avro.AppointmentProposed other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.leftyUserProviderId)) {
        this.leftyUserProviderId = data().deepCopy(fields()[0].schema(), other.leftyUserProviderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.clientAddressId)) {
        this.clientAddressId = data().deepCopy(fields()[1].schema(), other.clientAddressId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appointmentDateTime)) {
        this.appointmentDateTime = data().deepCopy(fields()[2].schema(), other.appointmentDateTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.proposedTimestamp)) {
        this.proposedTimestamp = data().deepCopy(fields()[3].schema(), other.proposedTimestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.leftyProviderServiceIds)) {
        this.leftyProviderServiceIds = data().deepCopy(fields()[4].schema(), other.leftyProviderServiceIds);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'leftyUserProviderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getLeftyUserProviderId() {
      return leftyUserProviderId;
    }


    /**
      * Sets the value of the 'leftyUserProviderId' field.
      * @param value The value of 'leftyUserProviderId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder setLeftyUserProviderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.leftyUserProviderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'leftyUserProviderId' field has been set.
      * @return True if the 'leftyUserProviderId' field has been set, false otherwise.
      */
    public boolean hasLeftyUserProviderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'leftyUserProviderId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder clearLeftyUserProviderId() {
      leftyUserProviderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientAddressId' field.
      * @return The value.
      */
    public java.lang.CharSequence getClientAddressId() {
      return clientAddressId;
    }


    /**
      * Sets the value of the 'clientAddressId' field.
      * @param value The value of 'clientAddressId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder setClientAddressId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.clientAddressId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'clientAddressId' field has been set.
      * @return True if the 'clientAddressId' field has been set, false otherwise.
      */
    public boolean hasClientAddressId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'clientAddressId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder clearClientAddressId() {
      clientAddressId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'appointmentDateTime' field.
      * @return The value.
      */
    public long getAppointmentDateTime() {
      return appointmentDateTime;
    }


    /**
      * Sets the value of the 'appointmentDateTime' field.
      * @param value The value of 'appointmentDateTime'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder setAppointmentDateTime(long value) {
      validate(fields()[2], value);
      this.appointmentDateTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'appointmentDateTime' field has been set.
      * @return True if the 'appointmentDateTime' field has been set, false otherwise.
      */
    public boolean hasAppointmentDateTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'appointmentDateTime' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder clearAppointmentDateTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'proposedTimestamp' field.
      * @return The value.
      */
    public long getProposedTimestamp() {
      return proposedTimestamp;
    }


    /**
      * Sets the value of the 'proposedTimestamp' field.
      * @param value The value of 'proposedTimestamp'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder setProposedTimestamp(long value) {
      validate(fields()[3], value);
      this.proposedTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'proposedTimestamp' field has been set.
      * @return True if the 'proposedTimestamp' field has been set, false otherwise.
      */
    public boolean hasProposedTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'proposedTimestamp' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder clearProposedTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'leftyProviderServiceIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLeftyProviderServiceIds() {
      return leftyProviderServiceIds;
    }


    /**
      * Sets the value of the 'leftyProviderServiceIds' field.
      * @param value The value of 'leftyProviderServiceIds'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder setLeftyProviderServiceIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.leftyProviderServiceIds = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'leftyProviderServiceIds' field has been set.
      * @return True if the 'leftyProviderServiceIds' field has been set, false otherwise.
      */
    public boolean hasLeftyProviderServiceIds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'leftyProviderServiceIds' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentProposed.Builder clearLeftyProviderServiceIds() {
      leftyProviderServiceIds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AppointmentProposed build() {
      try {
        AppointmentProposed record = new AppointmentProposed();
        record.leftyUserProviderId = fieldSetFlags()[0] ? this.leftyUserProviderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.clientAddressId = fieldSetFlags()[1] ? this.clientAddressId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.appointmentDateTime = fieldSetFlags()[2] ? this.appointmentDateTime : (java.lang.Long) defaultValue(fields()[2]);
        record.proposedTimestamp = fieldSetFlags()[3] ? this.proposedTimestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.leftyProviderServiceIds = fieldSetFlags()[4] ? this.leftyProviderServiceIds : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AppointmentProposed>
    WRITER$ = (org.apache.avro.io.DatumWriter<AppointmentProposed>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AppointmentProposed>
    READER$ = (org.apache.avro.io.DatumReader<AppointmentProposed>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.leftyUserProviderId);

    out.writeString(this.clientAddressId);

    out.writeLong(this.appointmentDateTime);

    out.writeLong(this.proposedTimestamp);

    long size0 = this.leftyProviderServiceIds.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.leftyProviderServiceIds) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.leftyUserProviderId = in.readString(this.leftyUserProviderId instanceof Utf8 ? (Utf8)this.leftyUserProviderId : null);

      this.clientAddressId = in.readString(this.clientAddressId instanceof Utf8 ? (Utf8)this.clientAddressId : null);

      this.appointmentDateTime = in.readLong();

      this.proposedTimestamp = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.leftyProviderServiceIds;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("leftyProviderServiceIds").schema());
        this.leftyProviderServiceIds = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.leftyUserProviderId = in.readString(this.leftyUserProviderId instanceof Utf8 ? (Utf8)this.leftyUserProviderId : null);
          break;

        case 1:
          this.clientAddressId = in.readString(this.clientAddressId instanceof Utf8 ? (Utf8)this.clientAddressId : null);
          break;

        case 2:
          this.appointmentDateTime = in.readLong();
          break;

        case 3:
          this.proposedTimestamp = in.readLong();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.leftyProviderServiceIds;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("leftyProviderServiceIds").schema());
            this.leftyProviderServiceIds = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










