/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leftybeauty.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TransactionSource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7465158144402429581L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionSource\",\"namespace\":\"com.leftybeauty.schema.avro\",\"fields\":[{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"providerTransactionIdentifier\",\"type\":\"string\"},{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"LeftyTransactionTypeEnum\",\"symbols\":[\"Payment\",\"Refund\"]}},{\"name\":\"amount\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionSource> ENCODER =
      new BinaryMessageEncoder<TransactionSource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionSource> DECODER =
      new BinaryMessageDecoder<TransactionSource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionSource> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionSource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionSource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionSource>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionSource to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionSource from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionSource instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionSource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence transactionId;
  private java.lang.CharSequence providerTransactionIdentifier;
  private java.lang.CharSequence paymentMethodId;
  private com.leftybeauty.schema.avro.LeftyTransactionTypeEnum type;
  private double amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionSource() {}

  /**
   * All-args constructor.
   * @param transactionId The new value for transactionId
   * @param providerTransactionIdentifier The new value for providerTransactionIdentifier
   * @param paymentMethodId The new value for paymentMethodId
   * @param type The new value for type
   * @param amount The new value for amount
   */
  public TransactionSource(java.lang.CharSequence transactionId, java.lang.CharSequence providerTransactionIdentifier, java.lang.CharSequence paymentMethodId, com.leftybeauty.schema.avro.LeftyTransactionTypeEnum type, java.lang.Double amount) {
    this.transactionId = transactionId;
    this.providerTransactionIdentifier = providerTransactionIdentifier;
    this.paymentMethodId = paymentMethodId;
    this.type = type;
    this.amount = amount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionId;
    case 1: return providerTransactionIdentifier;
    case 2: return paymentMethodId;
    case 3: return type;
    case 4: return amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionId = (java.lang.CharSequence)value$; break;
    case 1: providerTransactionIdentifier = (java.lang.CharSequence)value$; break;
    case 2: paymentMethodId = (java.lang.CharSequence)value$; break;
    case 3: type = (com.leftybeauty.schema.avro.LeftyTransactionTypeEnum)value$; break;
    case 4: amount = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'providerTransactionIdentifier' field.
   * @return The value of the 'providerTransactionIdentifier' field.
   */
  public java.lang.CharSequence getProviderTransactionIdentifier() {
    return providerTransactionIdentifier;
  }


  /**
   * Sets the value of the 'providerTransactionIdentifier' field.
   * @param value the value to set.
   */
  public void setProviderTransactionIdentifier(java.lang.CharSequence value) {
    this.providerTransactionIdentifier = value;
  }

  /**
   * Gets the value of the 'paymentMethodId' field.
   * @return The value of the 'paymentMethodId' field.
   */
  public java.lang.CharSequence getPaymentMethodId() {
    return paymentMethodId;
  }


  /**
   * Sets the value of the 'paymentMethodId' field.
   * @param value the value to set.
   */
  public void setPaymentMethodId(java.lang.CharSequence value) {
    this.paymentMethodId = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.leftybeauty.schema.avro.LeftyTransactionTypeEnum getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.leftybeauty.schema.avro.LeftyTransactionTypeEnum value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Creates a new TransactionSource RecordBuilder.
   * @return A new TransactionSource RecordBuilder
   */
  public static com.leftybeauty.schema.avro.TransactionSource.Builder newBuilder() {
    return new com.leftybeauty.schema.avro.TransactionSource.Builder();
  }

  /**
   * Creates a new TransactionSource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionSource RecordBuilder
   */
  public static com.leftybeauty.schema.avro.TransactionSource.Builder newBuilder(com.leftybeauty.schema.avro.TransactionSource.Builder other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.TransactionSource.Builder();
    } else {
      return new com.leftybeauty.schema.avro.TransactionSource.Builder(other);
    }
  }

  /**
   * Creates a new TransactionSource RecordBuilder by copying an existing TransactionSource instance.
   * @param other The existing instance to copy.
   * @return A new TransactionSource RecordBuilder
   */
  public static com.leftybeauty.schema.avro.TransactionSource.Builder newBuilder(com.leftybeauty.schema.avro.TransactionSource other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.TransactionSource.Builder();
    } else {
      return new com.leftybeauty.schema.avro.TransactionSource.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionSource instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionSource>
    implements org.apache.avro.data.RecordBuilder<TransactionSource> {

    private java.lang.CharSequence transactionId;
    private java.lang.CharSequence providerTransactionIdentifier;
    private java.lang.CharSequence paymentMethodId;
    private com.leftybeauty.schema.avro.LeftyTransactionTypeEnum type;
    private double amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leftybeauty.schema.avro.TransactionSource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.providerTransactionIdentifier)) {
        this.providerTransactionIdentifier = data().deepCopy(fields()[1].schema(), other.providerTransactionIdentifier);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.paymentMethodId)) {
        this.paymentMethodId = data().deepCopy(fields()[2].schema(), other.paymentMethodId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionSource instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leftybeauty.schema.avro.TransactionSource other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.providerTransactionIdentifier)) {
        this.providerTransactionIdentifier = data().deepCopy(fields()[1].schema(), other.providerTransactionIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentMethodId)) {
        this.paymentMethodId = data().deepCopy(fields()[2].schema(), other.paymentMethodId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'providerTransactionIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getProviderTransactionIdentifier() {
      return providerTransactionIdentifier;
    }


    /**
      * Sets the value of the 'providerTransactionIdentifier' field.
      * @param value The value of 'providerTransactionIdentifier'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder setProviderTransactionIdentifier(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.providerTransactionIdentifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'providerTransactionIdentifier' field has been set.
      * @return True if the 'providerTransactionIdentifier' field has been set, false otherwise.
      */
    public boolean hasProviderTransactionIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'providerTransactionIdentifier' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder clearProviderTransactionIdentifier() {
      providerTransactionIdentifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethodId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentMethodId() {
      return paymentMethodId;
    }


    /**
      * Sets the value of the 'paymentMethodId' field.
      * @param value The value of 'paymentMethodId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder setPaymentMethodId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.paymentMethodId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodId' field has been set.
      * @return True if the 'paymentMethodId' field has been set, false otherwise.
      */
    public boolean hasPaymentMethodId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'paymentMethodId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder clearPaymentMethodId() {
      paymentMethodId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.leftybeauty.schema.avro.LeftyTransactionTypeEnum getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder setType(com.leftybeauty.schema.avro.LeftyTransactionTypeEnum value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder setAmount(double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.TransactionSource.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionSource build() {
      try {
        TransactionSource record = new TransactionSource();
        record.transactionId = fieldSetFlags()[0] ? this.transactionId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.providerTransactionIdentifier = fieldSetFlags()[1] ? this.providerTransactionIdentifier : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.paymentMethodId = fieldSetFlags()[2] ? this.paymentMethodId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (com.leftybeauty.schema.avro.LeftyTransactionTypeEnum) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionSource>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionSource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionSource>
    READER$ = (org.apache.avro.io.DatumReader<TransactionSource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transactionId);

    out.writeString(this.providerTransactionIdentifier);

    out.writeString(this.paymentMethodId);

    out.writeEnum(this.type.ordinal());

    out.writeDouble(this.amount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transactionId = in.readString(this.transactionId instanceof Utf8 ? (Utf8)this.transactionId : null);

      this.providerTransactionIdentifier = in.readString(this.providerTransactionIdentifier instanceof Utf8 ? (Utf8)this.providerTransactionIdentifier : null);

      this.paymentMethodId = in.readString(this.paymentMethodId instanceof Utf8 ? (Utf8)this.paymentMethodId : null);

      this.type = com.leftybeauty.schema.avro.LeftyTransactionTypeEnum.values()[in.readEnum()];

      this.amount = in.readDouble();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transactionId = in.readString(this.transactionId instanceof Utf8 ? (Utf8)this.transactionId : null);
          break;

        case 1:
          this.providerTransactionIdentifier = in.readString(this.providerTransactionIdentifier instanceof Utf8 ? (Utf8)this.providerTransactionIdentifier : null);
          break;

        case 2:
          this.paymentMethodId = in.readString(this.paymentMethodId instanceof Utf8 ? (Utf8)this.paymentMethodId : null);
          break;

        case 3:
          this.type = com.leftybeauty.schema.avro.LeftyTransactionTypeEnum.values()[in.readEnum()];
          break;

        case 4:
          this.amount = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










