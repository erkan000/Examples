/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leftybeauty.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LeftyUserProfileUpsert extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6332890611355167386L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LeftyUserProfileUpsert\",\"namespace\":\"com.leftybeauty.schema.avro\",\"fields\":[{\"name\":\"leftyUserId\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"phoneNumber\",\"type\":\"long\"},{\"name\":\"countryCode\",\"type\":\"int\"},{\"name\":\"experience\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"userType\",\"type\":{\"type\":\"enum\",\"name\":\"LeftyUserTypeEnum\",\"symbols\":[\"Client\",\"Provider\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LeftyUserProfileUpsert> ENCODER =
      new BinaryMessageEncoder<LeftyUserProfileUpsert>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LeftyUserProfileUpsert> DECODER =
      new BinaryMessageDecoder<LeftyUserProfileUpsert>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LeftyUserProfileUpsert> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LeftyUserProfileUpsert> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LeftyUserProfileUpsert> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LeftyUserProfileUpsert>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LeftyUserProfileUpsert to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LeftyUserProfileUpsert from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LeftyUserProfileUpsert instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LeftyUserProfileUpsert fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence leftyUserId;
  private java.lang.CharSequence firstName;
  private java.lang.CharSequence lastName;
  private long phoneNumber;
  private int countryCode;
  private java.lang.CharSequence experience;
  private com.leftybeauty.schema.avro.LeftyUserTypeEnum userType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LeftyUserProfileUpsert() {}

  /**
   * All-args constructor.
   * @param leftyUserId The new value for leftyUserId
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param phoneNumber The new value for phoneNumber
   * @param countryCode The new value for countryCode
   * @param experience The new value for experience
   * @param userType The new value for userType
   */
  public LeftyUserProfileUpsert(java.lang.CharSequence leftyUserId, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.Long phoneNumber, java.lang.Integer countryCode, java.lang.CharSequence experience, com.leftybeauty.schema.avro.LeftyUserTypeEnum userType) {
    this.leftyUserId = leftyUserId;
    this.firstName = firstName;
    this.lastName = lastName;
    this.phoneNumber = phoneNumber;
    this.countryCode = countryCode;
    this.experience = experience;
    this.userType = userType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return leftyUserId;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return phoneNumber;
    case 4: return countryCode;
    case 5: return experience;
    case 6: return userType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: leftyUserId = (java.lang.CharSequence)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: lastName = (java.lang.CharSequence)value$; break;
    case 3: phoneNumber = (java.lang.Long)value$; break;
    case 4: countryCode = (java.lang.Integer)value$; break;
    case 5: experience = (java.lang.CharSequence)value$; break;
    case 6: userType = (com.leftybeauty.schema.avro.LeftyUserTypeEnum)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'leftyUserId' field.
   * @return The value of the 'leftyUserId' field.
   */
  public java.lang.CharSequence getLeftyUserId() {
    return leftyUserId;
  }


  /**
   * Sets the value of the 'leftyUserId' field.
   * @param value the value to set.
   */
  public void setLeftyUserId(java.lang.CharSequence value) {
    this.leftyUserId = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public long getPhoneNumber() {
    return phoneNumber;
  }


  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(long value) {
    this.phoneNumber = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   * @return The value of the 'countryCode' field.
   */
  public int getCountryCode() {
    return countryCode;
  }


  /**
   * Sets the value of the 'countryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(int value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'experience' field.
   * @return The value of the 'experience' field.
   */
  public java.lang.CharSequence getExperience() {
    return experience;
  }


  /**
   * Sets the value of the 'experience' field.
   * @param value the value to set.
   */
  public void setExperience(java.lang.CharSequence value) {
    this.experience = value;
  }

  /**
   * Gets the value of the 'userType' field.
   * @return The value of the 'userType' field.
   */
  public com.leftybeauty.schema.avro.LeftyUserTypeEnum getUserType() {
    return userType;
  }


  /**
   * Sets the value of the 'userType' field.
   * @param value the value to set.
   */
  public void setUserType(com.leftybeauty.schema.avro.LeftyUserTypeEnum value) {
    this.userType = value;
  }

  /**
   * Creates a new LeftyUserProfileUpsert RecordBuilder.
   * @return A new LeftyUserProfileUpsert RecordBuilder
   */
  public static com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder newBuilder() {
    return new com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder();
  }

  /**
   * Creates a new LeftyUserProfileUpsert RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LeftyUserProfileUpsert RecordBuilder
   */
  public static com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder newBuilder(com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder();
    } else {
      return new com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder(other);
    }
  }

  /**
   * Creates a new LeftyUserProfileUpsert RecordBuilder by copying an existing LeftyUserProfileUpsert instance.
   * @param other The existing instance to copy.
   * @return A new LeftyUserProfileUpsert RecordBuilder
   */
  public static com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder newBuilder(com.leftybeauty.schema.avro.LeftyUserProfileUpsert other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder();
    } else {
      return new com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder(other);
    }
  }

  /**
   * RecordBuilder for LeftyUserProfileUpsert instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LeftyUserProfileUpsert>
    implements org.apache.avro.data.RecordBuilder<LeftyUserProfileUpsert> {

    private java.lang.CharSequence leftyUserId;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private long phoneNumber;
    private int countryCode;
    private java.lang.CharSequence experience;
    private com.leftybeauty.schema.avro.LeftyUserTypeEnum userType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.leftyUserId)) {
        this.leftyUserId = data().deepCopy(fields()[0].schema(), other.leftyUserId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[3].schema(), other.phoneNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[4].schema(), other.countryCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.experience)) {
        this.experience = data().deepCopy(fields()[5].schema(), other.experience);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.userType)) {
        this.userType = data().deepCopy(fields()[6].schema(), other.userType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing LeftyUserProfileUpsert instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leftybeauty.schema.avro.LeftyUserProfileUpsert other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.leftyUserId)) {
        this.leftyUserId = data().deepCopy(fields()[0].schema(), other.leftyUserId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[3].schema(), other.phoneNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[4].schema(), other.countryCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.experience)) {
        this.experience = data().deepCopy(fields()[5].schema(), other.experience);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.userType)) {
        this.userType = data().deepCopy(fields()[6].schema(), other.userType);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'leftyUserId' field.
      * @return The value.
      */
    public java.lang.CharSequence getLeftyUserId() {
      return leftyUserId;
    }


    /**
      * Sets the value of the 'leftyUserId' field.
      * @param value The value of 'leftyUserId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setLeftyUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.leftyUserId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'leftyUserId' field has been set.
      * @return True if the 'leftyUserId' field has been set, false otherwise.
      */
    public boolean hasLeftyUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'leftyUserId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearLeftyUserId() {
      leftyUserId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public long getPhoneNumber() {
      return phoneNumber;
    }


    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setPhoneNumber(long value) {
      validate(fields()[3], value);
      this.phoneNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearPhoneNumber() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * @return The value.
      */
    public int getCountryCode() {
      return countryCode;
    }


    /**
      * Sets the value of the 'countryCode' field.
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setCountryCode(int value) {
      validate(fields()[4], value);
      this.countryCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearCountryCode() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'experience' field.
      * @return The value.
      */
    public java.lang.CharSequence getExperience() {
      return experience;
    }


    /**
      * Sets the value of the 'experience' field.
      * @param value The value of 'experience'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setExperience(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.experience = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'experience' field has been set.
      * @return True if the 'experience' field has been set, false otherwise.
      */
    public boolean hasExperience() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'experience' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearExperience() {
      experience = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'userType' field.
      * @return The value.
      */
    public com.leftybeauty.schema.avro.LeftyUserTypeEnum getUserType() {
      return userType;
    }


    /**
      * Sets the value of the 'userType' field.
      * @param value The value of 'userType'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder setUserType(com.leftybeauty.schema.avro.LeftyUserTypeEnum value) {
      validate(fields()[6], value);
      this.userType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'userType' field has been set.
      * @return True if the 'userType' field has been set, false otherwise.
      */
    public boolean hasUserType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'userType' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.LeftyUserProfileUpsert.Builder clearUserType() {
      userType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LeftyUserProfileUpsert build() {
      try {
        LeftyUserProfileUpsert record = new LeftyUserProfileUpsert();
        record.leftyUserId = fieldSetFlags()[0] ? this.leftyUserId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.phoneNumber = fieldSetFlags()[3] ? this.phoneNumber : (java.lang.Long) defaultValue(fields()[3]);
        record.countryCode = fieldSetFlags()[4] ? this.countryCode : (java.lang.Integer) defaultValue(fields()[4]);
        record.experience = fieldSetFlags()[5] ? this.experience : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.userType = fieldSetFlags()[6] ? this.userType : (com.leftybeauty.schema.avro.LeftyUserTypeEnum) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LeftyUserProfileUpsert>
    WRITER$ = (org.apache.avro.io.DatumWriter<LeftyUserProfileUpsert>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LeftyUserProfileUpsert>
    READER$ = (org.apache.avro.io.DatumReader<LeftyUserProfileUpsert>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.leftyUserId);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    out.writeLong(this.phoneNumber);

    out.writeInt(this.countryCode);

    if (this.experience == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.experience);
    }

    out.writeEnum(this.userType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.leftyUserId = in.readString(this.leftyUserId instanceof Utf8 ? (Utf8)this.leftyUserId : null);

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      this.phoneNumber = in.readLong();

      this.countryCode = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.experience = null;
      } else {
        this.experience = in.readString(this.experience instanceof Utf8 ? (Utf8)this.experience : null);
      }

      this.userType = com.leftybeauty.schema.avro.LeftyUserTypeEnum.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.leftyUserId = in.readString(this.leftyUserId instanceof Utf8 ? (Utf8)this.leftyUserId : null);
          break;

        case 1:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 2:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 3:
          this.phoneNumber = in.readLong();
          break;

        case 4:
          this.countryCode = in.readInt();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.experience = null;
          } else {
            this.experience = in.readString(this.experience instanceof Utf8 ? (Utf8)this.experience : null);
          }
          break;

        case 6:
          this.userType = com.leftybeauty.schema.avro.LeftyUserTypeEnum.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










