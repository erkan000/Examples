/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leftybeauty.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AppointmentPaymentProcessed extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6068482740345089864L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AppointmentPaymentProcessed\",\"namespace\":\"com.leftybeauty.schema.avro\",\"fields\":[{\"name\":\"financialAccountId\",\"type\":\"string\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"LeftyPaymentStatusEnum\",\"symbols\":[\"Approved\",\"Declined\"]}},{\"name\":\"providerTransactionIdentifier\",\"type\":\"string\"},{\"name\":\"appointmentId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"transactionType\",\"type\":{\"type\":\"enum\",\"name\":\"LeftyPaymentTypeEnum\",\"symbols\":[\"Payment\",\"Refund\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AppointmentPaymentProcessed> ENCODER =
      new BinaryMessageEncoder<AppointmentPaymentProcessed>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AppointmentPaymentProcessed> DECODER =
      new BinaryMessageDecoder<AppointmentPaymentProcessed>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AppointmentPaymentProcessed> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AppointmentPaymentProcessed> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AppointmentPaymentProcessed> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AppointmentPaymentProcessed>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AppointmentPaymentProcessed to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AppointmentPaymentProcessed from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AppointmentPaymentProcessed instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AppointmentPaymentProcessed fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence financialAccountId;
   private com.leftybeauty.schema.avro.LeftyPaymentStatusEnum status;
   private java.lang.CharSequence providerTransactionIdentifier;
   private java.lang.CharSequence appointmentId;
   private double amount;
   private com.leftybeauty.schema.avro.LeftyPaymentTypeEnum transactionType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AppointmentPaymentProcessed() {}

  /**
   * All-args constructor.
   * @param financialAccountId The new value for financialAccountId
   * @param status The new value for status
   * @param providerTransactionIdentifier The new value for providerTransactionIdentifier
   * @param appointmentId The new value for appointmentId
   * @param amount The new value for amount
   * @param transactionType The new value for transactionType
   */
  public AppointmentPaymentProcessed(java.lang.CharSequence financialAccountId, com.leftybeauty.schema.avro.LeftyPaymentStatusEnum status, java.lang.CharSequence providerTransactionIdentifier, java.lang.CharSequence appointmentId, java.lang.Double amount, com.leftybeauty.schema.avro.LeftyPaymentTypeEnum transactionType) {
    this.financialAccountId = financialAccountId;
    this.status = status;
    this.providerTransactionIdentifier = providerTransactionIdentifier;
    this.appointmentId = appointmentId;
    this.amount = amount;
    this.transactionType = transactionType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return financialAccountId;
    case 1: return status;
    case 2: return providerTransactionIdentifier;
    case 3: return appointmentId;
    case 4: return amount;
    case 5: return transactionType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: financialAccountId = (java.lang.CharSequence)value$; break;
    case 1: status = (com.leftybeauty.schema.avro.LeftyPaymentStatusEnum)value$; break;
    case 2: providerTransactionIdentifier = (java.lang.CharSequence)value$; break;
    case 3: appointmentId = (java.lang.CharSequence)value$; break;
    case 4: amount = (java.lang.Double)value$; break;
    case 5: transactionType = (com.leftybeauty.schema.avro.LeftyPaymentTypeEnum)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'financialAccountId' field.
   * @return The value of the 'financialAccountId' field.
   */
  public java.lang.CharSequence getFinancialAccountId() {
    return financialAccountId;
  }


  /**
   * Sets the value of the 'financialAccountId' field.
   * @param value the value to set.
   */
  public void setFinancialAccountId(java.lang.CharSequence value) {
    this.financialAccountId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.leftybeauty.schema.avro.LeftyPaymentStatusEnum getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.leftybeauty.schema.avro.LeftyPaymentStatusEnum value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'providerTransactionIdentifier' field.
   * @return The value of the 'providerTransactionIdentifier' field.
   */
  public java.lang.CharSequence getProviderTransactionIdentifier() {
    return providerTransactionIdentifier;
  }


  /**
   * Sets the value of the 'providerTransactionIdentifier' field.
   * @param value the value to set.
   */
  public void setProviderTransactionIdentifier(java.lang.CharSequence value) {
    this.providerTransactionIdentifier = value;
  }

  /**
   * Gets the value of the 'appointmentId' field.
   * @return The value of the 'appointmentId' field.
   */
  public java.lang.CharSequence getAppointmentId() {
    return appointmentId;
  }


  /**
   * Sets the value of the 'appointmentId' field.
   * @param value the value to set.
   */
  public void setAppointmentId(java.lang.CharSequence value) {
    this.appointmentId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'transactionType' field.
   * @return The value of the 'transactionType' field.
   */
  public com.leftybeauty.schema.avro.LeftyPaymentTypeEnum getTransactionType() {
    return transactionType;
  }


  /**
   * Sets the value of the 'transactionType' field.
   * @param value the value to set.
   */
  public void setTransactionType(com.leftybeauty.schema.avro.LeftyPaymentTypeEnum value) {
    this.transactionType = value;
  }

  /**
   * Creates a new AppointmentPaymentProcessed RecordBuilder.
   * @return A new AppointmentPaymentProcessed RecordBuilder
   */
  public static com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder newBuilder() {
    return new com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder();
  }

  /**
   * Creates a new AppointmentPaymentProcessed RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AppointmentPaymentProcessed RecordBuilder
   */
  public static com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder newBuilder(com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder();
    } else {
      return new com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder(other);
    }
  }

  /**
   * Creates a new AppointmentPaymentProcessed RecordBuilder by copying an existing AppointmentPaymentProcessed instance.
   * @param other The existing instance to copy.
   * @return A new AppointmentPaymentProcessed RecordBuilder
   */
  public static com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder newBuilder(com.leftybeauty.schema.avro.AppointmentPaymentProcessed other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder();
    } else {
      return new com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder(other);
    }
  }

  /**
   * RecordBuilder for AppointmentPaymentProcessed instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AppointmentPaymentProcessed>
    implements org.apache.avro.data.RecordBuilder<AppointmentPaymentProcessed> {

    private java.lang.CharSequence financialAccountId;
    private com.leftybeauty.schema.avro.LeftyPaymentStatusEnum status;
    private java.lang.CharSequence providerTransactionIdentifier;
    private java.lang.CharSequence appointmentId;
    private double amount;
    private com.leftybeauty.schema.avro.LeftyPaymentTypeEnum transactionType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.financialAccountId)) {
        this.financialAccountId = data().deepCopy(fields()[0].schema(), other.financialAccountId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.providerTransactionIdentifier)) {
        this.providerTransactionIdentifier = data().deepCopy(fields()[2].schema(), other.providerTransactionIdentifier);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.appointmentId)) {
        this.appointmentId = data().deepCopy(fields()[3].schema(), other.appointmentId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AppointmentPaymentProcessed instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leftybeauty.schema.avro.AppointmentPaymentProcessed other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.financialAccountId)) {
        this.financialAccountId = data().deepCopy(fields()[0].schema(), other.financialAccountId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.providerTransactionIdentifier)) {
        this.providerTransactionIdentifier = data().deepCopy(fields()[2].schema(), other.providerTransactionIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.appointmentId)) {
        this.appointmentId = data().deepCopy(fields()[3].schema(), other.appointmentId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'financialAccountId' field.
      * @return The value.
      */
    public java.lang.CharSequence getFinancialAccountId() {
      return financialAccountId;
    }


    /**
      * Sets the value of the 'financialAccountId' field.
      * @param value The value of 'financialAccountId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder setFinancialAccountId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.financialAccountId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'financialAccountId' field has been set.
      * @return True if the 'financialAccountId' field has been set, false otherwise.
      */
    public boolean hasFinancialAccountId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'financialAccountId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder clearFinancialAccountId() {
      financialAccountId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.leftybeauty.schema.avro.LeftyPaymentStatusEnum getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder setStatus(com.leftybeauty.schema.avro.LeftyPaymentStatusEnum value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'providerTransactionIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getProviderTransactionIdentifier() {
      return providerTransactionIdentifier;
    }


    /**
      * Sets the value of the 'providerTransactionIdentifier' field.
      * @param value The value of 'providerTransactionIdentifier'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder setProviderTransactionIdentifier(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.providerTransactionIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'providerTransactionIdentifier' field has been set.
      * @return True if the 'providerTransactionIdentifier' field has been set, false otherwise.
      */
    public boolean hasProviderTransactionIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'providerTransactionIdentifier' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder clearProviderTransactionIdentifier() {
      providerTransactionIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'appointmentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAppointmentId() {
      return appointmentId;
    }


    /**
      * Sets the value of the 'appointmentId' field.
      * @param value The value of 'appointmentId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder setAppointmentId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.appointmentId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'appointmentId' field has been set.
      * @return True if the 'appointmentId' field has been set, false otherwise.
      */
    public boolean hasAppointmentId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'appointmentId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder clearAppointmentId() {
      appointmentId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder setAmount(double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * @return The value.
      */
    public com.leftybeauty.schema.avro.LeftyPaymentTypeEnum getTransactionType() {
      return transactionType;
    }


    /**
      * Sets the value of the 'transactionType' field.
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder setTransactionType(com.leftybeauty.schema.avro.LeftyPaymentTypeEnum value) {
      validate(fields()[5], value);
      this.transactionType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.AppointmentPaymentProcessed.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AppointmentPaymentProcessed build() {
      try {
        AppointmentPaymentProcessed record = new AppointmentPaymentProcessed();
        record.financialAccountId = fieldSetFlags()[0] ? this.financialAccountId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (com.leftybeauty.schema.avro.LeftyPaymentStatusEnum) defaultValue(fields()[1]);
        record.providerTransactionIdentifier = fieldSetFlags()[2] ? this.providerTransactionIdentifier : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.appointmentId = fieldSetFlags()[3] ? this.appointmentId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Double) defaultValue(fields()[4]);
        record.transactionType = fieldSetFlags()[5] ? this.transactionType : (com.leftybeauty.schema.avro.LeftyPaymentTypeEnum) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AppointmentPaymentProcessed>
    WRITER$ = (org.apache.avro.io.DatumWriter<AppointmentPaymentProcessed>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AppointmentPaymentProcessed>
    READER$ = (org.apache.avro.io.DatumReader<AppointmentPaymentProcessed>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.financialAccountId);

    out.writeEnum(this.status.ordinal());

    out.writeString(this.providerTransactionIdentifier);

    out.writeString(this.appointmentId);

    out.writeDouble(this.amount);

    out.writeEnum(this.transactionType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.financialAccountId = in.readString(this.financialAccountId instanceof Utf8 ? (Utf8)this.financialAccountId : null);

      this.status = com.leftybeauty.schema.avro.LeftyPaymentStatusEnum.values()[in.readEnum()];

      this.providerTransactionIdentifier = in.readString(this.providerTransactionIdentifier instanceof Utf8 ? (Utf8)this.providerTransactionIdentifier : null);

      this.appointmentId = in.readString(this.appointmentId instanceof Utf8 ? (Utf8)this.appointmentId : null);

      this.amount = in.readDouble();

      this.transactionType = com.leftybeauty.schema.avro.LeftyPaymentTypeEnum.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.financialAccountId = in.readString(this.financialAccountId instanceof Utf8 ? (Utf8)this.financialAccountId : null);
          break;

        case 1:
          this.status = com.leftybeauty.schema.avro.LeftyPaymentStatusEnum.values()[in.readEnum()];
          break;

        case 2:
          this.providerTransactionIdentifier = in.readString(this.providerTransactionIdentifier instanceof Utf8 ? (Utf8)this.providerTransactionIdentifier : null);
          break;

        case 3:
          this.appointmentId = in.readString(this.appointmentId instanceof Utf8 ? (Utf8)this.appointmentId : null);
          break;

        case 4:
          this.amount = in.readDouble();
          break;

        case 5:
          this.transactionType = com.leftybeauty.schema.avro.LeftyPaymentTypeEnum.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










