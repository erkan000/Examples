/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leftybeauty.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DiscountUpsert extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6505450021456476317L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DiscountUpsert\",\"namespace\":\"com.leftybeauty.schema.avro\",\"fields\":[{\"name\":\"leftyUserId\",\"type\":\"string\"},{\"name\":\"discountSourceId\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"DiscountTypeEnum\",\"symbols\":[\"Percentage\",\"FlatAmount\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DiscountUpsert> ENCODER =
      new BinaryMessageEncoder<DiscountUpsert>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DiscountUpsert> DECODER =
      new BinaryMessageDecoder<DiscountUpsert>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DiscountUpsert> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DiscountUpsert> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DiscountUpsert> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DiscountUpsert>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DiscountUpsert to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DiscountUpsert from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DiscountUpsert instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DiscountUpsert fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence leftyUserId;
  private java.lang.CharSequence discountSourceId;
  private java.lang.CharSequence name;
  private double amount;
  private com.leftybeauty.schema.avro.DiscountTypeEnum type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DiscountUpsert() {}

  /**
   * All-args constructor.
   * @param leftyUserId The new value for leftyUserId
   * @param discountSourceId The new value for discountSourceId
   * @param name The new value for name
   * @param amount The new value for amount
   * @param type The new value for type
   */
  public DiscountUpsert(java.lang.CharSequence leftyUserId, java.lang.CharSequence discountSourceId, java.lang.CharSequence name, java.lang.Double amount, com.leftybeauty.schema.avro.DiscountTypeEnum type) {
    this.leftyUserId = leftyUserId;
    this.discountSourceId = discountSourceId;
    this.name = name;
    this.amount = amount;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return leftyUserId;
    case 1: return discountSourceId;
    case 2: return name;
    case 3: return amount;
    case 4: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: leftyUserId = (java.lang.CharSequence)value$; break;
    case 1: discountSourceId = (java.lang.CharSequence)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: amount = (java.lang.Double)value$; break;
    case 4: type = (com.leftybeauty.schema.avro.DiscountTypeEnum)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'leftyUserId' field.
   * @return The value of the 'leftyUserId' field.
   */
  public java.lang.CharSequence getLeftyUserId() {
    return leftyUserId;
  }


  /**
   * Sets the value of the 'leftyUserId' field.
   * @param value the value to set.
   */
  public void setLeftyUserId(java.lang.CharSequence value) {
    this.leftyUserId = value;
  }

  /**
   * Gets the value of the 'discountSourceId' field.
   * @return The value of the 'discountSourceId' field.
   */
  public java.lang.CharSequence getDiscountSourceId() {
    return discountSourceId;
  }


  /**
   * Sets the value of the 'discountSourceId' field.
   * @param value the value to set.
   */
  public void setDiscountSourceId(java.lang.CharSequence value) {
    this.discountSourceId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.leftybeauty.schema.avro.DiscountTypeEnum getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.leftybeauty.schema.avro.DiscountTypeEnum value) {
    this.type = value;
  }

  /**
   * Creates a new DiscountUpsert RecordBuilder.
   * @return A new DiscountUpsert RecordBuilder
   */
  public static com.leftybeauty.schema.avro.DiscountUpsert.Builder newBuilder() {
    return new com.leftybeauty.schema.avro.DiscountUpsert.Builder();
  }

  /**
   * Creates a new DiscountUpsert RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DiscountUpsert RecordBuilder
   */
  public static com.leftybeauty.schema.avro.DiscountUpsert.Builder newBuilder(com.leftybeauty.schema.avro.DiscountUpsert.Builder other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.DiscountUpsert.Builder();
    } else {
      return new com.leftybeauty.schema.avro.DiscountUpsert.Builder(other);
    }
  }

  /**
   * Creates a new DiscountUpsert RecordBuilder by copying an existing DiscountUpsert instance.
   * @param other The existing instance to copy.
   * @return A new DiscountUpsert RecordBuilder
   */
  public static com.leftybeauty.schema.avro.DiscountUpsert.Builder newBuilder(com.leftybeauty.schema.avro.DiscountUpsert other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.DiscountUpsert.Builder();
    } else {
      return new com.leftybeauty.schema.avro.DiscountUpsert.Builder(other);
    }
  }

  /**
   * RecordBuilder for DiscountUpsert instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DiscountUpsert>
    implements org.apache.avro.data.RecordBuilder<DiscountUpsert> {

    private java.lang.CharSequence leftyUserId;
    private java.lang.CharSequence discountSourceId;
    private java.lang.CharSequence name;
    private double amount;
    private com.leftybeauty.schema.avro.DiscountTypeEnum type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leftybeauty.schema.avro.DiscountUpsert.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.leftyUserId)) {
        this.leftyUserId = data().deepCopy(fields()[0].schema(), other.leftyUserId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.discountSourceId)) {
        this.discountSourceId = data().deepCopy(fields()[1].schema(), other.discountSourceId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing DiscountUpsert instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leftybeauty.schema.avro.DiscountUpsert other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.leftyUserId)) {
        this.leftyUserId = data().deepCopy(fields()[0].schema(), other.leftyUserId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.discountSourceId)) {
        this.discountSourceId = data().deepCopy(fields()[1].schema(), other.discountSourceId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'leftyUserId' field.
      * @return The value.
      */
    public java.lang.CharSequence getLeftyUserId() {
      return leftyUserId;
    }


    /**
      * Sets the value of the 'leftyUserId' field.
      * @param value The value of 'leftyUserId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder setLeftyUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.leftyUserId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'leftyUserId' field has been set.
      * @return True if the 'leftyUserId' field has been set, false otherwise.
      */
    public boolean hasLeftyUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'leftyUserId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder clearLeftyUserId() {
      leftyUserId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'discountSourceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDiscountSourceId() {
      return discountSourceId;
    }


    /**
      * Sets the value of the 'discountSourceId' field.
      * @param value The value of 'discountSourceId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder setDiscountSourceId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.discountSourceId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'discountSourceId' field has been set.
      * @return True if the 'discountSourceId' field has been set, false otherwise.
      */
    public boolean hasDiscountSourceId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'discountSourceId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder clearDiscountSourceId() {
      discountSourceId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder setAmount(double value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder clearAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.leftybeauty.schema.avro.DiscountTypeEnum getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder setType(com.leftybeauty.schema.avro.DiscountTypeEnum value) {
      validate(fields()[4], value);
      this.type = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.DiscountUpsert.Builder clearType() {
      type = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DiscountUpsert build() {
      try {
        DiscountUpsert record = new DiscountUpsert();
        record.leftyUserId = fieldSetFlags()[0] ? this.leftyUserId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.discountSourceId = fieldSetFlags()[1] ? this.discountSourceId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Double) defaultValue(fields()[3]);
        record.type = fieldSetFlags()[4] ? this.type : (com.leftybeauty.schema.avro.DiscountTypeEnum) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DiscountUpsert>
    WRITER$ = (org.apache.avro.io.DatumWriter<DiscountUpsert>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DiscountUpsert>
    READER$ = (org.apache.avro.io.DatumReader<DiscountUpsert>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.leftyUserId);

    out.writeString(this.discountSourceId);

    out.writeString(this.name);

    out.writeDouble(this.amount);

    out.writeEnum(this.type.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.leftyUserId = in.readString(this.leftyUserId instanceof Utf8 ? (Utf8)this.leftyUserId : null);

      this.discountSourceId = in.readString(this.discountSourceId instanceof Utf8 ? (Utf8)this.discountSourceId : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.amount = in.readDouble();

      this.type = com.leftybeauty.schema.avro.DiscountTypeEnum.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.leftyUserId = in.readString(this.leftyUserId instanceof Utf8 ? (Utf8)this.leftyUserId : null);
          break;

        case 1:
          this.discountSourceId = in.readString(this.discountSourceId instanceof Utf8 ? (Utf8)this.discountSourceId : null);
          break;

        case 2:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 3:
          this.amount = in.readDouble();
          break;

        case 4:
          this.type = com.leftybeauty.schema.avro.DiscountTypeEnum.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










