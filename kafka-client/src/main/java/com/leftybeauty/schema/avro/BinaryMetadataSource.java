/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leftybeauty.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BinaryMetadataSource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4339165873133740789L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BinaryMetadataSource\",\"namespace\":\"com.leftybeauty.schema.avro\",\"fields\":[{\"name\":\"binaryMetadataId\",\"type\":\"string\"},{\"name\":\"leftyUsersIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"mimeType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"MimeType\",\"symbols\":[\"TEXT\",\"JSON\",\"JPEG\"]}]},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"storageProviderLocation\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BinaryMetadataSource> ENCODER =
      new BinaryMessageEncoder<BinaryMetadataSource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BinaryMetadataSource> DECODER =
      new BinaryMessageDecoder<BinaryMetadataSource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BinaryMetadataSource> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BinaryMetadataSource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BinaryMetadataSource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BinaryMetadataSource>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BinaryMetadataSource to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BinaryMetadataSource from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BinaryMetadataSource instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BinaryMetadataSource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence binaryMetadataId;
  private java.util.List<java.lang.CharSequence> leftyUsersIds;
  private com.leftybeauty.schema.avro.MimeType mimeType;
  private java.lang.CharSequence name;
  private java.lang.CharSequence storageProviderLocation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BinaryMetadataSource() {}

  /**
   * All-args constructor.
   * @param binaryMetadataId The new value for binaryMetadataId
   * @param leftyUsersIds The new value for leftyUsersIds
   * @param mimeType The new value for mimeType
   * @param name The new value for name
   * @param storageProviderLocation The new value for storageProviderLocation
   */
  public BinaryMetadataSource(java.lang.CharSequence binaryMetadataId, java.util.List<java.lang.CharSequence> leftyUsersIds, com.leftybeauty.schema.avro.MimeType mimeType, java.lang.CharSequence name, java.lang.CharSequence storageProviderLocation) {
    this.binaryMetadataId = binaryMetadataId;
    this.leftyUsersIds = leftyUsersIds;
    this.mimeType = mimeType;
    this.name = name;
    this.storageProviderLocation = storageProviderLocation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return binaryMetadataId;
    case 1: return leftyUsersIds;
    case 2: return mimeType;
    case 3: return name;
    case 4: return storageProviderLocation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: binaryMetadataId = (java.lang.CharSequence)value$; break;
    case 1: leftyUsersIds = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: mimeType = (com.leftybeauty.schema.avro.MimeType)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: storageProviderLocation = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'binaryMetadataId' field.
   * @return The value of the 'binaryMetadataId' field.
   */
  public java.lang.CharSequence getBinaryMetadataId() {
    return binaryMetadataId;
  }


  /**
   * Sets the value of the 'binaryMetadataId' field.
   * @param value the value to set.
   */
  public void setBinaryMetadataId(java.lang.CharSequence value) {
    this.binaryMetadataId = value;
  }

  /**
   * Gets the value of the 'leftyUsersIds' field.
   * @return The value of the 'leftyUsersIds' field.
   */
  public java.util.List<java.lang.CharSequence> getLeftyUsersIds() {
    return leftyUsersIds;
  }


  /**
   * Sets the value of the 'leftyUsersIds' field.
   * @param value the value to set.
   */
  public void setLeftyUsersIds(java.util.List<java.lang.CharSequence> value) {
    this.leftyUsersIds = value;
  }

  /**
   * Gets the value of the 'mimeType' field.
   * @return The value of the 'mimeType' field.
   */
  public com.leftybeauty.schema.avro.MimeType getMimeType() {
    return mimeType;
  }


  /**
   * Sets the value of the 'mimeType' field.
   * @param value the value to set.
   */
  public void setMimeType(com.leftybeauty.schema.avro.MimeType value) {
    this.mimeType = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'storageProviderLocation' field.
   * @return The value of the 'storageProviderLocation' field.
   */
  public java.lang.CharSequence getStorageProviderLocation() {
    return storageProviderLocation;
  }


  /**
   * Sets the value of the 'storageProviderLocation' field.
   * @param value the value to set.
   */
  public void setStorageProviderLocation(java.lang.CharSequence value) {
    this.storageProviderLocation = value;
  }

  /**
   * Creates a new BinaryMetadataSource RecordBuilder.
   * @return A new BinaryMetadataSource RecordBuilder
   */
  public static com.leftybeauty.schema.avro.BinaryMetadataSource.Builder newBuilder() {
    return new com.leftybeauty.schema.avro.BinaryMetadataSource.Builder();
  }

  /**
   * Creates a new BinaryMetadataSource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BinaryMetadataSource RecordBuilder
   */
  public static com.leftybeauty.schema.avro.BinaryMetadataSource.Builder newBuilder(com.leftybeauty.schema.avro.BinaryMetadataSource.Builder other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.BinaryMetadataSource.Builder();
    } else {
      return new com.leftybeauty.schema.avro.BinaryMetadataSource.Builder(other);
    }
  }

  /**
   * Creates a new BinaryMetadataSource RecordBuilder by copying an existing BinaryMetadataSource instance.
   * @param other The existing instance to copy.
   * @return A new BinaryMetadataSource RecordBuilder
   */
  public static com.leftybeauty.schema.avro.BinaryMetadataSource.Builder newBuilder(com.leftybeauty.schema.avro.BinaryMetadataSource other) {
    if (other == null) {
      return new com.leftybeauty.schema.avro.BinaryMetadataSource.Builder();
    } else {
      return new com.leftybeauty.schema.avro.BinaryMetadataSource.Builder(other);
    }
  }

  /**
   * RecordBuilder for BinaryMetadataSource instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BinaryMetadataSource>
    implements org.apache.avro.data.RecordBuilder<BinaryMetadataSource> {

    private java.lang.CharSequence binaryMetadataId;
    private java.util.List<java.lang.CharSequence> leftyUsersIds;
    private com.leftybeauty.schema.avro.MimeType mimeType;
    private java.lang.CharSequence name;
    private java.lang.CharSequence storageProviderLocation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leftybeauty.schema.avro.BinaryMetadataSource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.binaryMetadataId)) {
        this.binaryMetadataId = data().deepCopy(fields()[0].schema(), other.binaryMetadataId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.leftyUsersIds)) {
        this.leftyUsersIds = data().deepCopy(fields()[1].schema(), other.leftyUsersIds);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[2].schema(), other.mimeType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.storageProviderLocation)) {
        this.storageProviderLocation = data().deepCopy(fields()[4].schema(), other.storageProviderLocation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing BinaryMetadataSource instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leftybeauty.schema.avro.BinaryMetadataSource other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.binaryMetadataId)) {
        this.binaryMetadataId = data().deepCopy(fields()[0].schema(), other.binaryMetadataId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.leftyUsersIds)) {
        this.leftyUsersIds = data().deepCopy(fields()[1].schema(), other.leftyUsersIds);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[2].schema(), other.mimeType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.storageProviderLocation)) {
        this.storageProviderLocation = data().deepCopy(fields()[4].schema(), other.storageProviderLocation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'binaryMetadataId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBinaryMetadataId() {
      return binaryMetadataId;
    }


    /**
      * Sets the value of the 'binaryMetadataId' field.
      * @param value The value of 'binaryMetadataId'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder setBinaryMetadataId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.binaryMetadataId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'binaryMetadataId' field has been set.
      * @return True if the 'binaryMetadataId' field has been set, false otherwise.
      */
    public boolean hasBinaryMetadataId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'binaryMetadataId' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder clearBinaryMetadataId() {
      binaryMetadataId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'leftyUsersIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLeftyUsersIds() {
      return leftyUsersIds;
    }


    /**
      * Sets the value of the 'leftyUsersIds' field.
      * @param value The value of 'leftyUsersIds'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder setLeftyUsersIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.leftyUsersIds = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'leftyUsersIds' field has been set.
      * @return True if the 'leftyUsersIds' field has been set, false otherwise.
      */
    public boolean hasLeftyUsersIds() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'leftyUsersIds' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder clearLeftyUsersIds() {
      leftyUsersIds = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mimeType' field.
      * @return The value.
      */
    public com.leftybeauty.schema.avro.MimeType getMimeType() {
      return mimeType;
    }


    /**
      * Sets the value of the 'mimeType' field.
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder setMimeType(com.leftybeauty.schema.avro.MimeType value) {
      validate(fields()[2], value);
      this.mimeType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'storageProviderLocation' field.
      * @return The value.
      */
    public java.lang.CharSequence getStorageProviderLocation() {
      return storageProviderLocation;
    }


    /**
      * Sets the value of the 'storageProviderLocation' field.
      * @param value The value of 'storageProviderLocation'.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder setStorageProviderLocation(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.storageProviderLocation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'storageProviderLocation' field has been set.
      * @return True if the 'storageProviderLocation' field has been set, false otherwise.
      */
    public boolean hasStorageProviderLocation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'storageProviderLocation' field.
      * @return This builder.
      */
    public com.leftybeauty.schema.avro.BinaryMetadataSource.Builder clearStorageProviderLocation() {
      storageProviderLocation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BinaryMetadataSource build() {
      try {
        BinaryMetadataSource record = new BinaryMetadataSource();
        record.binaryMetadataId = fieldSetFlags()[0] ? this.binaryMetadataId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.leftyUsersIds = fieldSetFlags()[1] ? this.leftyUsersIds : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.mimeType = fieldSetFlags()[2] ? this.mimeType : (com.leftybeauty.schema.avro.MimeType) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.storageProviderLocation = fieldSetFlags()[4] ? this.storageProviderLocation : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BinaryMetadataSource>
    WRITER$ = (org.apache.avro.io.DatumWriter<BinaryMetadataSource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BinaryMetadataSource>
    READER$ = (org.apache.avro.io.DatumReader<BinaryMetadataSource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.binaryMetadataId);

    long size0 = this.leftyUsersIds.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.leftyUsersIds) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.mimeType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.mimeType.ordinal());
    }

    out.writeString(this.name);

    out.writeString(this.storageProviderLocation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.binaryMetadataId = in.readString(this.binaryMetadataId instanceof Utf8 ? (Utf8)this.binaryMetadataId : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.leftyUsersIds;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("leftyUsersIds").schema());
        this.leftyUsersIds = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mimeType = null;
      } else {
        this.mimeType = com.leftybeauty.schema.avro.MimeType.values()[in.readEnum()];
      }

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.storageProviderLocation = in.readString(this.storageProviderLocation instanceof Utf8 ? (Utf8)this.storageProviderLocation : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.binaryMetadataId = in.readString(this.binaryMetadataId instanceof Utf8 ? (Utf8)this.binaryMetadataId : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.leftyUsersIds;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("leftyUsersIds").schema());
            this.leftyUsersIds = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mimeType = null;
          } else {
            this.mimeType = com.leftybeauty.schema.avro.MimeType.values()[in.readEnum()];
          }
          break;

        case 3:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 4:
          this.storageProviderLocation = in.readString(this.storageProviderLocation instanceof Utf8 ? (Utf8)this.storageProviderLocation : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










